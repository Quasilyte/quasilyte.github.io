<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[shortread] on Iskander Sharipov technical blog</title>
    <link>https://quasilyte.dev/blog/tags/shortread/</link>
    <description>Recent content in [shortread] on Iskander Sharipov technical blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Feb 2019 22:15:32 +0300</lastBuildDate>
    
	<atom:link href="https://quasilyte.dev/blog/tags/shortread/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Step driven evaluation</title>
      <link>https://quasilyte.dev/blog/post/step-pattern/</link>
      <pubDate>Wed, 27 Feb 2019 22:15:32 +0300</pubDate>
      
      <guid>https://quasilyte.dev/blog/post/step-pattern/</guid>
      <description>If you heard about table driven tests, the idea described in this article will be easier to grasp, since it&amp;rsquo;s the same technique, but used outside of the tests.
Suppose you have a function that executes a lot of other functions. This function probably does two main things:
 It checks for all returned errors as they occur. It passes one function outputs as the inputs for another.  // process is an example pipeline-like function.</description>
    </item>
    
    <item>
      <title>log.Fatal vs log.Panic</title>
      <link>https://quasilyte.dev/blog/post/log-fatal-vs-log-panic/</link>
      <pubDate>Tue, 08 Jan 2019 01:46:18 +0300</pubDate>
      
      <guid>https://quasilyte.dev/blog/post/log-fatal-vs-log-panic/</guid>
      <description>Update: probably the best alternative to log.Fatalf inside main is log.Printf followed by a return statement. If your main function contains a lot of such exit points, consider using a step driven evaluation pattern.
 I personally don&amp;rsquo;t like log.Fatal/Fatalf/Fatalln. I feel sad because of their ubiquity in Go examples as a form of reaction to an error. I personally prefer log.Panic.
The log.Panic vs log.Fatal is essentially panic vs os.</description>
    </item>
    
  </channel>
</rss>